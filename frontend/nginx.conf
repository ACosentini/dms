server {
    listen 80;
    
    # Add debug logging
    error_log /var/log/nginx/error.log debug;
    access_log /var/log/nginx/access.log;
    
    # Add health check for backend
    location = /check-backend {
        default_type text/html;
        return 200 '<html><body><h1>Checking backend...</h1><script>
            // Multiple endpoints to try
            const endpoints = [
                "/actuator/health",
                "/api/actuator/health", 
                "/health",
                "/api/health"
            ];
            
            const testEndpoint = async (url) => {
                try {
                    console.log("Testing: " + url);
                    const startTime = new Date().getTime();
                    const response = await fetch(url, {
                        method: "GET",
                        headers: { "Accept": "application/json" }
                    });
                    const endTime = new Date().getTime();
                    const responseTime = endTime - startTime;
                    
                    try {
                        const data = await response.json();
                        return {
                            url: url,
                            status: response.status,
                            success: response.ok,
                            time: responseTime + "ms",
                            data: data
                        };
                    } catch (jsonError) {
                        const text = await response.text();
                        return {
                            url: url,
                            status: response.status,
                            success: response.ok,
                            time: responseTime + "ms",
                            text: text.substring(0, 100) + "..."
                        };
                    }
                } catch (error) {
                    return {
                        url: url,
                        error: error.message,
                        success: false
                    };
                }
            };
            
            const checkBackend = async () => {
                document.body.innerHTML = "<h1>Backend Check in Progress...</h1><p>Testing multiple endpoints...</p>";
                
                const results = [];
                
                // Test base URL
                results.push(await testEndpoint("${BACKEND_URL}"));
                
                // Test each endpoint
                for (const endpoint of endpoints) {
                    results.push(await testEndpoint("${BACKEND_URL}" + endpoint));
                }
                
                // Try with HTTP instead of HTTPS for each endpoint
                if ("${BACKEND_URL}".startsWith("https://")) {
                    const httpUrl = "${BACKEND_URL}".replace("https://", "http://");
                    results.push(await testEndpoint(httpUrl));
                    for (const endpoint of endpoints) {
                        results.push(await testEndpoint(httpUrl + endpoint));
                    }
                }
                
                // Generate results HTML
                let resultsHtml = "<h1>Backend Connection Tests</h1>" +
                    "<p>Tested at: " + new Date().toISOString() + "</p>" +
                    "<p>Backend URL: ${BACKEND_URL}</p>" +
                    "<table border=\'1\' style=\'width:100%; border-collapse:collapse;\'>" +
                    "<tr><th>URL</th><th>Status</th><th>Success</th><th>Time</th><th>Response</th></tr>";
                
                results.forEach(result => {
                    let responseData;
                    if (result.data) {
                        responseData = JSON.stringify(result.data, null, 2);
                    } else if (result.text) {
                        responseData = result.text;
                    } else if (result.error) {
                        responseData = "Error: " + result.error;
                    } else {
                        responseData = "No response";
                    }
                    
                    resultsHtml += "<tr>" +
                        "<td>" + result.url + "</td>" +
                        "<td>" + (result.status || "N/A") + "</td>" +
                        "<td>" + (result.success ? "✅" : "❌") + "</td>" +
                        "<td>" + (result.time || "N/A") + "</td>" +
                        "<td><pre style=\'max-width:400px;overflow:auto;\'>" + responseData + "</pre></td>" +
                        "</tr>";
                });
                
                resultsHtml += "</table>" +
                    "<p>Page will refresh in 30 seconds...</p>" +
                    "<button onclick=\'checkBackend()\'>Refresh Now</button>";
                
                document.body.innerHTML = resultsHtml;
                setTimeout(checkBackend, 30000);
            };
            
            checkBackend();
        </script></body></html>';
    }
    
    location / {
        root /usr/share/nginx/html;
        index index.html index.htm;
        try_files $uri $uri/ /index.html;
    }
    
    # Special handling for the auth login endpoint
    location = /api/auth/login {
        # Extract domain from backend URL and convert to HTTP
        set $backend_url "${BACKEND_URL}";
        
        # Strip https:// if present and replace with http://
        if ($backend_url ~ ^https://(.+)$) {
            set $backend_http "http://$1";
        }
        
        # If already http://, keep as is
        if ($backend_url ~ ^http://(.+)$) {
            set $backend_http "http://$1";
        }
        
        # Basic headers - use original backend hostname for Host header
        proxy_set_header Host $backend_url;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Disable SSL verification
        proxy_ssl_verify off;
        
        # Timeouts
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
        
        # DNS resolver
        resolver 8.8.8.8 valid=300s;
        resolver_timeout 10s;
        
        # Disable redirects
        proxy_redirect off;
        
        # Try both with and without context path
        # Your Spring app has context path /api, but we already have /api in the request URL
        # So we need to try /auth/login NOT /api/auth/login
        proxy_pass http://$backend_http/auth/login;
    }
    
    # Generic API handling for all other endpoints
    location /api/ {
        # Extract domain from backend URL and convert to HTTP
        set $backend_url "${BACKEND_URL}";
        
        # Strip https:// if present and replace with http://
        if ($backend_url ~ ^https://(.+)$) {
            set $backend_http "http://$1";
        }
        
        # If already http://, keep as is
        if ($backend_url ~ ^http://(.+)$) {
            set $backend_http "http://$1";
        }
        
        # Basic headers - use original backend hostname for Host header
        proxy_set_header Host $backend_url;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Disable SSL verification
        proxy_ssl_verify off;
        
        # Timeouts
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
        
        # DNS resolver
        resolver 8.8.8.8 valid=300s;
        resolver_timeout 10s;
        
        # Disable redirects
        proxy_redirect off;
        
        # Strip /api prefix like setupProxy.js does
        # When a request comes to /api/something, forward to /something
        proxy_pass http://$backend_http/;
    }
} 