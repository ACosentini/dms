server {
    listen 80;
    
    # Add debug logging
    error_log /var/log/nginx/error.log debug;
    access_log /var/log/nginx/access.log;
    
    # Add health check for backend
    location = /check-backend {
        default_type text/html;
        return 200 '<html><body><h1>Checking backend...</h1><script>
            const checkBackend = async () => {
                try {
                    const response = await fetch("${BACKEND_URL}/actuator/health", {
                        method: "GET"
                    });
                    const data = await response.json();
                    document.body.innerHTML = `<h1>Backend Status</h1>
                        <p>Status: ${data.status || "Unknown"}</p>
                        <p>Checked at: ${new Date().toISOString()}</p>
                        <p>Backend URL: ${BACKEND_URL}</p>
                        <pre>${JSON.stringify(data, null, 2)}</pre>`;
                } catch (error) {
                    document.body.innerHTML = `<h1>Backend Error</h1>
                        <p>Error: ${error.message}</p>
                        <p>Checked at: ${new Date().toISOString()}</p>
                        <p>Backend URL: ${BACKEND_URL}</p>`;
                }
                setTimeout(checkBackend, 30000);
            };
            checkBackend();
        </script></body></html>';
    }
    
    location / {
        root /usr/share/nginx/html;
        index index.html index.htm;
        try_files $uri $uri/ /index.html;
    }
    
    # Special handling for the auth login endpoint
    location = /api/auth/login {
        # Extract domain from backend URL and convert to HTTP
        set $backend_url "${BACKEND_URL}";
        
        # Strip https:// if present and replace with http://
        if ($backend_url ~ ^https://(.+)$) {
            set $backend_http "http://$1";
        }
        
        # If already http://, keep as is
        if ($backend_url ~ ^http://(.+)$) {
            set $backend_http "http://$1";
        }
        
        # Basic headers - use original backend hostname for Host header
        proxy_set_header Host $backend_url;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Disable SSL verification
        proxy_ssl_verify off;
        
        # Timeouts
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
        
        # DNS resolver
        resolver 8.8.8.8 valid=300s;
        resolver_timeout 10s;
        
        # Disable redirects
        proxy_redirect off;
        
        # Explicitly use HTTP protocol instead of HTTPS
        proxy_pass http://$backend_http/auth/login;
    }
    
    # Generic API handling for all other endpoints
    location /api/ {
        # Extract domain from backend URL and convert to HTTP
        set $backend_url "${BACKEND_URL}";
        
        # Strip https:// if present and replace with http://
        if ($backend_url ~ ^https://(.+)$) {
            set $backend_http "http://$1";
        }
        
        # If already http://, keep as is
        if ($backend_url ~ ^http://(.+)$) {
            set $backend_http "http://$1";
        }
        
        # Basic headers - use original backend hostname for Host header
        proxy_set_header Host $backend_url;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Disable SSL verification
        proxy_ssl_verify off;
        
        # Timeouts
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
        
        # DNS resolver
        resolver 8.8.8.8 valid=300s;
        resolver_timeout 10s;
        
        # Disable redirects
        proxy_redirect off;
        
        # Explicitly use HTTP protocol instead of HTTPS and strip /api prefix
        proxy_pass http://$backend_http/;
    }
} 