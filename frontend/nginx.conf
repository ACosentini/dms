server {
    listen 80;
    
    # Add debug logging
    error_log /var/log/nginx/error.log debug;
    access_log /var/log/nginx/access.log;
    
    # Simplified health check for backend
    location = /check-backend {
        default_type text/html;
        return 200 '<html><body><h1>Backend Health Check</h1><div id="results">Checking...</div><script>
            async function checkUrl(url) {
                try {
                    const start = new Date().getTime();
                    const response = await fetch(url);
                    const elapsed = new Date().getTime() - start;
                    return {
                        url: url,
                        status: response.status,
                        success: response.ok,
                        time: elapsed + "ms"
                    };
                } catch (error) {
                    return { url: url, error: error.message, success: false };
                }
            }
            
            async function runChecks() {
                const baseUrl = "${BACKEND_URL}";
                document.getElementById("results").innerHTML = "Testing connections to " + baseUrl + "...";
                
                const urls = [
                    baseUrl,
                    baseUrl + "/actuator/health",
                    baseUrl + "/api/actuator/health", 
                    baseUrl + "/auth/login",
                    baseUrl + "/api/auth/login",
                    baseUrl + "/api/hello"
                ];
                
                let html = "<h2>Results:</h2><ul>";
                for (const url of urls) {
                    const result = await checkUrl(url);
                    html += "<li>" + url + ": " + 
                        (result.success ? "✓" : "✗") + " " +
                        (result.status || "") + " " +
                        (result.error || "") + "</li>";
                }
                html += "</ul><p>Tested at: " + new Date().toISOString() + "</p>";
                html += "<button onclick=\"runChecks()\">Refresh</button>";
                
                document.getElementById("results").innerHTML = html;
            }
            
            runChecks();
        </script></body></html>';
    }
    
    location / {
        root /usr/share/nginx/html;
        index index.html index.htm;
        try_files $uri $uri/ /index.html;
    }
    
    # Handle API requests with a simplified approach
    location /api/ {
        # Extract the domain from the BACKEND_URL for host header
        set $backend_domain "${BACKEND_URL}";
        if ($backend_domain ~ ^https?://(.+)$) {
            set $backend_domain $1;
        }
        
        # Simple headers setup
        proxy_set_header Host $backend_domain;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # TLS/SSL settings
        proxy_ssl_verify off;
        proxy_ssl_server_name on;
        proxy_ssl_protocols TLSv1 TLSv1.1 TLSv1.2 TLSv1.3;
        proxy_ssl_ciphers DEFAULT;
        
        # Set long timeouts
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
        
        # Required for DNS resolution
        resolver 8.8.8.8 valid=300s;
        
        # Disable redirects
        proxy_redirect off;
        
        # Debug headers
        add_header X-Debug-Backend "${BACKEND_URL}" always;
        add_header X-Debug-TLS "Enabled with all protocol versions" always;
        
        # IMPORTANT: Use the direct URL format instead of proxy_pass with variables
        # This avoids SSL verification issues
        proxy_pass "${BACKEND_URL}/api/";
    }
} 