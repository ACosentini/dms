server {
    listen 80;
    
    # Add debug logging
    error_log /var/log/nginx/error.log debug;
    access_log /var/log/nginx/access.log;
    
    # Simplified health check for backend
    location = /check-backend {
        default_type text/html;
        return 200 '<html><body><h1>Backend Health Check</h1><div id="results">Checking...</div><script>
            async function checkUrl(url) {
                try {
                    const start = new Date().getTime();
                    const response = await fetch(url);
                    const elapsed = new Date().getTime() - start;
                    return {
                        url: url,
                        status: response.status,
                        success: response.ok,
                        time: elapsed + "ms"
                    };
                } catch (error) {
                    return { url: url, error: error.message, success: false };
                }
            }
            
            async function runChecks() {
                const baseUrl = "${BACKEND_URL}";
                document.getElementById("results").innerHTML = "Testing connections to " + baseUrl + "...";
                
                const urls = [
                    baseUrl,
                    baseUrl + "/actuator/health",
                    baseUrl + "/api/actuator/health", 
                    baseUrl + "/auth/login",
                    baseUrl + "/api/auth/login",
                    baseUrl.replace("https://", "http://") + "/api/actuator/health"
                ];
                
                let html = "<h2>Results:</h2><ul>";
                for (const url of urls) {
                    const result = await checkUrl(url);
                    html += "<li>" + url + ": " + 
                        (result.success ? "✓" : "✗") + " " +
                        (result.status || "") + " " +
                        (result.error || "") + "</li>";
                }
                html += "</ul><p>Tested at: " + new Date().toISOString() + "</p>";
                html += "<button onclick=\"runChecks()\">Refresh</button>";
                
                document.getElementById("results").innerHTML = html;
            }
            
            runChecks();
        </script></body></html>';
    }
    
    location / {
        root /usr/share/nginx/html;
        index index.html index.htm;
        try_files $uri $uri/ /index.html;
    }
    
    # Special handling for the auth login endpoint
    location = /api/auth/login {
        # Extract domain from backend URL and convert to HTTP
        set $backend_url "${BACKEND_URL}";
        
        # Strip https:// if present and replace with http://
        if ($backend_url ~ ^https://(.+)$) {
            set $backend_http "http://$1";
        }
        
        # If already http://, keep as is
        if ($backend_url ~ ^http://(.+)$) {
            set $backend_http "http://$1";
        }
        
        # Basic headers - use original backend hostname for Host header
        proxy_set_header Host $backend_url;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Disable SSL verification
        proxy_ssl_verify off;
        
        # Timeouts
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
        
        # DNS resolver
        resolver 8.8.8.8 valid=300s;
        resolver_timeout 10s;
        
        # Disable redirects
        proxy_redirect off;
        
        # Important: Spring Boot already has /api context path
        # So when the request is /api/auth/login, we need to proxy to /api/auth/login
        # NOT /auth/login which would result in 404
        proxy_pass http://$backend_http/api/auth/login;
    }
    
    # Generic API handling for all other endpoints
    location /api/ {
        # Extract domain from backend URL and convert to HTTP
        set $backend_url "${BACKEND_URL}";
        
        # Strip https:// if present and replace with http://
        if ($backend_url ~ ^https://(.+)$) {
            set $backend_http "http://$1";
        }
        
        # If already http://, keep as is
        if ($backend_url ~ ^http://(.+)$) {
            set $backend_http "http://$1";
        }
        
        # Basic headers - use original backend hostname for Host header
        proxy_set_header Host $backend_url;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Disable SSL verification
        proxy_ssl_verify off;
        
        # Timeouts
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
        
        # DNS resolver
        resolver 8.8.8.8 valid=300s;
        resolver_timeout 10s;
        
        # Disable redirects
        proxy_redirect off;
        
        # Critical: Don't strip /api prefix
        # Since the backend already has /api context path,
        # we need to keep it in the proxy path
        proxy_pass http://$backend_http/api/;
    }
} 